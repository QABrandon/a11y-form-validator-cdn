(function(){'use strict';console.log('üîß A11y Form Validator - Standalone Script Loading... v1.0.6');const ALLOWED_DOMAINS=[ 'webflow.io','webflow.com','netlify.app','vercel.app','github.io' ];function validateDomain(){const hostname=window.location.hostname;const isAllowed=ALLOWED_DOMAINS.some(domain=> hostname.includes(domain));if(!isAllowed){console.error('üö´ Unauthorized domain:',hostname);console.warn('A11y Form Validator is only authorized for specific domains');return false;}console.log('‚úÖ Domain validation passed:',hostname);return true;}function validateLicense(){const licenseKey=window.A11Y_LICENSE_KEY || document.querySelector('meta[name="a11y-license"]')?.content || document.querySelector('meta[name="a11y-form-validator-license"]')?.content;if(!licenseKey){console.warn('‚ö†Ô∏è No license key found - using fallback validation only');return false;}if(licenseKey.length < 10){console.warn('‚ö†Ô∏è Invalid license key format');return false;}console.log('‚úÖ License validation passed');return true;}if(!validateDomain()){console.error('üö´ A11y Form Validator blocked - unauthorized domain');return;}const hasValidLicense=validateLicense();const SUPABASE_URL=window.SUPABASE_URL || null;const SUPABASE_ANON_KEY=window.SUPABASE_ANON_KEY || null;let validationRulesCache=new Map();let cacheExpiry=new Map();const CACHE_DURATION=5 * 60 * 1000;const errorMessages={required:'This field is required',email:'Please enter a valid email address',phone:'Please enter a valid phone number',url:'Please enter a valid URL',number:'Please enter a valid number',date:'Please enter a valid date',minlength:'Please enter at least{min}characters',maxlength:'Please enter no more than{max}characters'};async function fetchValidationRules(formId){const cacheKey=formId;const now=Date.now();if(validationRulesCache.has(cacheKey)&& cacheExpiry.has(cacheKey)&& now < cacheExpiry.get(cacheKey)){console.log('üìã Using cached validation rules for form:',formId);return validationRulesCache.get(cacheKey);}try{console.log('üîç Fetching validation rules for form:',formId);if(SUPABASE_URL && SUPABASE_ANON_KEY && hasValidLicense){const response=await fetch(`${SUPABASE_URL}/rest/v1/validation_rules?form_id=eq.${formId}&is_active=eq.true&order=order_index.asc`,{headers:{'apikey':SUPABASE_ANON_KEY,'Authorization':`Bearer ${SUPABASE_ANON_KEY}`,'Content-Type':'application/json'}});if(response.ok){const rules=await response.json();console.log('‚úÖ Fetched validation rules from database:',rules.length);const transformedRules=rules.map(rule=>({field_name:rule.field_name,rules:[{rule_type:rule.rule_type,rule_config:rule.rule_config,error_message:rule.error_message,is_active:rule.is_active}]}));validationRulesCache.set(cacheKey,transformedRules);cacheExpiry.set(cacheKey,now + CACHE_DURATION);return transformedRules;}else{console.warn('‚ö†Ô∏è Database fetch failed,falling back to attributes');}}}catch(error){console.warn('‚ö†Ô∏è Failed to fetch validation rules from database:',error);}const rules=await fetchValidationRulesFromAttributes(formId);validationRulesCache.set(cacheKey,rules);cacheExpiry.set(cacheKey,now + CACHE_DURATION);return rules;}async function fetchValidationRulesFromAttributes(formId){const form=document.querySelector(`#${formId}`)|| document.querySelector(`form[name="${formId}"]`)|| document.querySelector(`form[data-a11y-validator="enabled"]`);if(!form){console.warn('‚ö†Ô∏è Form not found for ID:',formId);return [];}const rules=[];const fields=form.querySelectorAll('input,textarea,select');fields.forEach(field=>{const fieldName=field.name || field.id || 'unnamed-field';const fieldRules=[];const hasA11yValidator=field.hasAttribute('data-error-id')|| field.hasAttribute('data-auto-error-messaging')|| field.hasAttribute('data-field-label');if(!hasA11yValidator){console.log('‚ö†Ô∏è Field does not have A11y validator attributes:',fieldName);return;}if(field.hasAttribute('required')){fieldRules.push({rule_type:'required',error_message:`${getFieldLabel(field)}is required`,is_active:true});}if(field.type==='email'){fieldRules.push({rule_type:'email',error_message:'Please enter a valid email address',is_active:true});}if(field.type==='tel'){fieldRules.push({rule_type:'phone',error_message:'Please enter a valid phone number',is_active:true});}if(field.type==='url'){fieldRules.push({rule_type:'url',error_message:'Please enter a valid URL',is_active:true});}const minLength=field.getAttribute('minlength');if(minLength){fieldRules.push({rule_type:'min_length',rule_config:{value:parseInt(minLength)},error_message:`Must be at least ${minLength}characters`,is_active:true});}const maxLength=field.getAttribute('maxlength');if(maxLength){fieldRules.push({rule_type:'max_length',rule_config:{value:parseInt(maxLength)},error_message:`Must be no more than ${maxLength}characters`,is_active:true});}const pattern=field.getAttribute('pattern');if(pattern){fieldRules.push({rule_type:'pattern',rule_config:{pattern:pattern},error_message:'Format is invalid',is_active:true});}if(fieldRules.length > 0){rules.push({field_name:fieldName,rules:fieldRules});}});console.log('üìã Extracted validation rules from attributes:',rules);return rules;}function getFieldLabel(field){const fieldId=field.getAttribute('id');if(fieldId){const labelElement=document.querySelector('label[for="' + fieldId + '"]');if(labelElement && labelElement.textContent.trim()){return labelElement.textContent.trim();}}const ariaLabelledBy=field.getAttribute('aria-labelledby');if(ariaLabelledBy){const labelElement=document.getElementById(ariaLabelledBy);if(labelElement && labelElement.textContent.trim()){return labelElement.textContent.trim();}}const ariaLabel=field.getAttribute('aria-label');if(ariaLabel){return ariaLabel;}const dataLabel=field.getAttribute('data-field-label');if(dataLabel){return dataLabel;}const fieldName=field.getAttribute('name');if(fieldName){return fieldName.replace(/[-_]/g,' ').replace(/\b\w/g,l=> l.toUpperCase());}return 'This field';}function getFieldSpecificMessage(messageType,fieldLabel,context={}){const templates={required:'{fieldLabel}is required',email:'{fieldLabel}must be a valid email address(name@company.com)',phone:'{fieldLabel}must be a valid phone number(US & CA:(555)123-4567)',url:'{fieldLabel}must be a valid URL(https:minlength:'{fieldLabel}must be at least{min}characters long',maxlength:'{fieldLabel}must be no more than{max}characters long'};let message=templates[messageType] || 'Please check{fieldLabel}';message=message.replace('{fieldLabel}',fieldLabel);message=message.replace('{min}',context.min || '');message=message.replace('{max}',context.max || '');return message;}async function validateField(field){const fieldName=field.getAttribute('name')|| field.getAttribute('data-field-name');if(!fieldName){console.log('‚ö†Ô∏è Field has no name attribute:',field);return true;}const fieldLabel=getFieldLabel(field);let isValid=true;let errorMessage='';console.log('üîß Validating field:',fieldName,'with label:',fieldLabel);const form=field.closest('form');const formId=form?.id || form?.name || 'default';const validationRules=await fetchValidationRules(formId);const fieldRules=validationRules.find(rule=> rule.field_name===fieldName);console.log('üìã Validation rules for field:',fieldName,':',fieldRules);if(fieldRules && fieldRules.rules){for(const rule of fieldRules.rules){if(!rule.is_active)continue;const fieldValue=field.value || '';const ruleType=rule.rule_type;const ruleConfig=rule.rule_config ||{};let ruleValid=true;switch(ruleType){case 'required':if(!fieldValue.trim()){ruleValid=false;}break;case 'email':if(fieldValue && !isValidEmail(fieldValue)){ruleValid=false;}break;case 'phone':if(fieldValue && !isValidPhone(fieldValue)){ruleValid=false;}break;case 'url':if(fieldValue && !isValidUrl(fieldValue)){ruleValid=false;}break;case 'min_length':if(fieldValue && fieldValue.length < ruleConfig.value){ruleValid=false;}break;case 'max_length':if(fieldValue && fieldValue.length > ruleConfig.value){ruleValid=false;}break;case 'pattern':if(fieldValue && !new RegExp(ruleConfig.pattern).test(fieldValue)){ruleValid=false;}break;}if(!ruleValid){isValid=false;errorMessage=rule.error_message || getFieldSpecificMessage(ruleType,fieldLabel,ruleConfig);break;}}}else{if(field.hasAttribute('required')&& !field.value.trim()){isValid=false;errorMessage=getFieldSpecificMessage('required',fieldLabel);}if(field.type==='email' && field.value){if(!isValidEmail(field.value)){isValid=false;errorMessage=getFieldSpecificMessage('email',fieldLabel);}}if(field.type==='tel' && field.value){if(!isValidPhone(field.value)){isValid=false;errorMessage=getFieldSpecificMessage('phone',fieldLabel);}}if(field.type==='url' && field.value){if(!isValidUrl(field.value)){isValid=false;errorMessage=getFieldSpecificMessage('url',fieldLabel);}}}if(!isValid && errorMessage){showError(field,errorMessage);field.setAttribute('aria-invalid','true');const errorId=field.getAttribute('data-error-id');if(errorId){field.setAttribute('aria-describedby',errorId);}}else{hideError(field);field.removeAttribute('aria-invalid');field.removeAttribute('aria-describedby');}return isValid;}async function validateForm(form){const fields=form.querySelectorAll('input,textarea,select');let isFormValid=true;for(const field of fields){const isFieldValid=await validateField(field);if(!isFieldValid){isFormValid=false;}}return isFormValid;}function showError(field,message){let errorId=field.getAttribute('data-error-id');if(!errorId){errorId=`a11y-error-${field.name || field.id || 'field'}-${Date.now()}`;field.setAttribute('data-error-id',errorId);}let errorElement=document.getElementById(errorId);if(!errorElement){errorElement=document.createElement('div');errorElement.id=errorId;errorElement.setAttribute('role','alert');errorElement.className='a11y-error-message';const fieldParent=field.parentElement;if(fieldParent){fieldParent.insertBefore(errorElement,field.nextSibling);}}errorElement.textContent=message;errorElement.style.display='block';errorElement.style.color='#721c24';errorElement.style.backgroundColor='#f8d7da';errorElement.style.border='1px solid #f5c6cb';errorElement.style.padding='8px 12px';errorElement.style.borderRadius='4px';errorElement.style.marginTop='8px';errorElement.style.fontSize='14px';errorElement.style.fontWeight='600';errorElement.style.lineHeight='1.4';errorElement.style.fontFamily='-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,sans-serif';field.setAttribute('aria-invalid','true');field.setAttribute('aria-describedby',errorId);console.log('‚úÖ Error message displayed:',message,'for field:',field.name || field.id);}function hideError(field){const errorId=field.getAttribute('data-error-id');if(!errorId)return;const errorElement=document.getElementById(errorId);if(errorElement){errorElement.style.display='none';}field.removeAttribute('aria-invalid');field.removeAttribute('aria-describedby');console.log('‚úÖ Error message hidden for field:',field.name || field.id);}function isValidEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email);}function isValidPhone(phone){const phoneRegex=/^[\+]?[1-9][\d]{0,15}$/;const cleanPhone=phone.replace(/[\s\-\(\)\.]/g,'');return phoneRegex.test(cleanPhone);}function isValidUrl(url){try{new URL(url);return true;}catch(e){return false;}}function initializeFormValidation(form){const formId=form.id || form.name || 'default';console.log('üîß Initializing validation for form:',formId);const fields=form.querySelectorAll('input,textarea,select');console.log('üìã Found',fields.length,'field(s)in form');fields.forEach(field=>{field.addEventListener('blur',async()=>{await validateField(field);});field.addEventListener('input',async()=>{if(field.dataset.touched==='true'){await validateField(field);}});field.addEventListener('focus',()=>{field.dataset.touched='true';});});form.addEventListener('submit',async(e)=>{console.log('üîß Form submission detected,validating...');const isValid=await validateForm(form);if(!isValid){console.log('‚ùå Form validation failed - preventing submission');e.preventDefault();const firstInvalidField=form.querySelector('[aria-invalid="true"]');if(firstInvalidField){firstInvalidField.focus();}}else{console.log('‚úÖ Form validation passed - allowing submission');}});}function initializeValidation(){let forms=document.querySelectorAll('form[data-a11y-validator="enabled"]');if(forms.length===0){forms=document.querySelectorAll('form');console.log('‚ÑπÔ∏è No forms with data-a11y-validator found,checking all forms...');}if(forms.length===0){console.log('‚ÑπÔ∏è No forms found on page,skipping validation initialization');return;}console.log('üìã Found',forms.length,'form(s)on page,initializing validation');forms.forEach(form=>{initializeFormValidation(form);});console.log('‚úÖ A11y Form Validator initialized successfully');}function waitForDOM(){if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initializeValidation);}else{initializeValidation();}}waitForDOM();})();